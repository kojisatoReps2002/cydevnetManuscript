# アプリの親子関係について - その2

前回の記事(リンク)では、kintone における親子関係について、アプリストアの「商品見積書パック」を例に、便宜的な呼び方としての「同居親子関係」「独立親子関係」それぞれ実際のデータを見ながら、どのような振る舞いとなるかの考察と確認を行って参りました。

今回も引き続き、同アプリパックを例に「独立親子関係」の表現を補完する働きを持つ「関連レコード一覧」の作用について確認を行い、その後見積明細情報について「同居親子関係」を解消し、独立した時の振る舞いと、そこで有効になるスクリプトの例について説明をさせていただきたいと思います。

まずは、リマインドになるかとは思いますが「関連レコード一覧」とは「自アプリを含むアプリとアプリの間において、設定した二つの項目が持つ、値の一致性を利用して、kintone 内にある情報を一覧して表示する機能」となります。

文章にすると、なんだかわかりにくいですが「商品見積書パック」の場合、例えば商品リストアプリ上に「見積商品一覧」を作成する、つまりその商品がどの見積で参照されているかを表示する、ということになるかと思います。

しかしながら「関連レコード一覧」では、設定できる項目及び項目間に対して、いつくかの制約条件があり、この場合、見積もり明細が「テーブルフィールド」として実装されているため、そこに定義が含まれている「型番」項目については指定をすることができません。

※関連レコードとして定義できるフィールド間の条件
https://help.cybozu.com/ja/k/user/display_relatedrecords.html

繰り返しになりますが「同居親子関係」として「テーブルフィールド」に設定された項目は、一覧(ビュー)上への表示だったり、分類や集計として指定したりする事が可能な点については前回の記事(リンク)でも記載しましたが、上記リンク先の表にある通り「関連レコード」の対象にはなりません。

「同居親子関係」の「子」については、上記「関連レコード一覧」の項目として指定できないこと以外にも、標準の機能では、csvインポートの対象とはならないこと(出力は可能)も注意が必要です。もちろん、カスタマイズによって対応することは可能ですので、その場合は、以下の記事が参考になるかと思います。

[テーブルデータをCSVでインポートしてみよう!]
https://cybozudev.zendesk.com/hc/ja/articles/204972070
[テーブルデータをCSVでアップデートしてみよう!]
https://cybozudev.zendesk.com/hc/ja/articles/208399613

さて、実際の kintone の利用局面では、上記のような制約、特に「テーブルフィールド」に対して、標準機能ではファイルi/oの実現が出来ない点は導入の障壁になる事が多く、上記リンク情報等を活用したカスタマイズの開発が検討されるところではありますが、もう一つの考え方として「同居親子関係」の「子」である「見積明細」を「独立親子関係」として独立させてしまうという方法があります。

[fig 1. (dn1608explanatory.pptx slide 3)]

具体的には見積明細というアプリを新規に作成し、項目として見積書アプリの「テーブルフィールド」にあった項目を全て定義し、そこに見積書アプリの「見積番号」を参照する「ルックアップフィールド」を追加します。

[fig2. (dn16090601.png)]

また、見積などの明細行が必要とするキー情報として「明細番号」も追加し、さらに見積明細アプリで分析として使用する事が想定される項目を、見積書アプリからコピーすると便利な任意の項目についても追加します。見積書アプリの場合は、一般的には「宛名」や「見積日」などが候補となるでしょう。

[fig3. (dn16090602.png)]

商品リストアプリを参照する「ルックアップフィールド」及び取得する項目は、特に変更なく元の定義通りに設定します。このようにすれば、標準機能で「見積明細」に対するcsvファイルによるインポートが標準機能で実現可能となります。集計やグラフなどの分析機能も、適切に「親」情報を取得するように設定すれば「同居親子関係」同様に実現できます。

見積明細アプリができましたら、見積書アプリでは「テーブルフィールド」にある明細の情報は削除し、代わりに「関連レコード一覧」にて表示するレコードの条件を[見積書].[見積番号]=[見積明細].[見積番号]とし「見積書」アプリ上に表示したい「見積明細」アプリの項目を定義します。

[fig4. (dn16090603.png)]

以上の設定によって、めでたく「見積書」と「見積明細」はこれまでの「同居親子関係」から、それぞれ独立したアプリとなり「見積番号」をキーに「独立親子関係」を築くことになりました。ひとつのアプリになることにより、 kintone の提供する集計、グラフ、履歴管理、コミュニケーション機能がそれぞれに提供されるのも、一つのポジティブなモチベーションになるかと思います。

ところで、この見積明細アプリの小計金額ですが、見積書アプリの「関連レコード」として表示されているものは「テーブルフィールド」のように、計算項目として指定することが出来ないため、合計金額を見積書アプリに表示させるためには、jsカスタマイズのコードが必要となります。

以前の記事(リンク:https://cybozudev.zendesk.com/hc/ja/articles/203030394))でも取り上げさせて頂きましたが、その時には単に計算結果を表示するだけでしたので、一覧への表示やグラフの集計項目として指定することはできませんでした。そこで、今回は独立記念として(!)見積書アプリに項目として「お見積金額」を追加し、関連レコードの小計金額を合計した更新結果を反映するようにしたいと思います。

[fig5. (dn16090604.png)]

まず、見積書アプリの「計算フィールド」として定義されている「合計金額」を削除し、以下の項目を追加します。

+------------------+------------------+------+------------------+
|追加するフィールド|フィールド名      |初期値|フィールドコード  |
+------------------+------------------+------+------------------+
|数値              |見積金額          | -    |見積金額          |
+------------------+------------------+------+------------------+

また、事前準備として、新規に作成した見積明細アプリに以下の項目を追加します。

+------------------+------------------+------+------------------+
|追加するフィールド|フィールド名      |初期値|フィールドコード  |
+------------------+------------------+------+------------------+
|数値              |見積書レコード番号| -    |見積書レコード番号|
+------------------+------------------+------+------------------+
|数値              |修正前小計        | 0    |                  |
+------------------+------------------+------+------------------+

次に、fig2 で設定した「ルックアップフィード」の「ほかのフィルールドのコピー」にて[見積書].[見積レコード番号]を上記で設定した[見積明細].[見積書レコード番号]にコピーするように設定を追加してください。

後は以下のコードを、見積明細アプリに適用するのみです。

[InsDelParentRecords.js]

## ソースコードの解説

このプログラムは、見積明細アプリにレコードが追加、編集、削除した時に動作するようになっておりますので、events 配列に該当イベントを表す文字列を定数として設定しています。余談ですが、ここで記述しているconst 宣言は、ES6にて追加され]た言語仕様で、未実装の多いIE系では動作しません(EdgeはOK)ので、その場合は、適宜varなどに書き換えて下さいませ。

ロジック上のポイントととしては、39行目からの、上記で定義した定数イベントタイプ毎に発生するイベントタイプごとの計算を実施しているところになるかと思います。

38        // 追加時は加算、削除時は減算、更新時は差分計算
39        switch(event.type) {
40          case c_sbmt:
41            amount = amount + subTotal;
42            break;
43          case edt_sbmt:
44          case i_edt_sbmt:
45            // 変更操作で小計金額の変更がない場合は見積修正不要なので終了
46            if (subTotal == subTotalPrev) { return; }
47            amount = amount + subTotal - subTotalPrev;
48            break;
49          case d_del_sbmt:
50          case i_del_sbmt:
51            amount = amount - subTotal;
52            break;

追加時は加算、削除時は減算、変更時は、差額を計算しますが、金額に変更がない場合は不要なリクエストは発生させて内容にしています。変更時の差額を判定するために、集計前小計を保持しているところも、ちょっとした工夫をしているところです。

また、コードが前後してしまいますが、計算結果は「親」の情報である「お見積もり金額」を更新しますので、当然の事ながら他の操作により論理不整合が発声する可能性がありますので、下記記事を参考に、更新時に、revision を指定し、失われた更新を避けるようにしています。

[安全に在庫管理を行うテクニック]
https://cybozudev.zendesk.com/hc/ja/articles/201255224

以上、kintone でアプリの論理関係を構築する際の注意点、トピックについて、実際のお客様からの問合せ等を元に、執筆をさせて頂きました。業務の適用に悩まれている方に、少しでもヒント等になる部分がありましたら、とても嬉しく思います。ご不明な点、お気づきの点、見つけたバグや誤記などございましたら、ぜひ、コメント下さいませ。
