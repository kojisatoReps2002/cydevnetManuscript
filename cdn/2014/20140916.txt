【文字連結して自動採番】(2014/09/16)

年次ごとの自動採番にいつては、以前の<a href="http://goo.gl/3DNjyg">記事</a>にて紹介させて頂いておりますが、今回は、これをアプリ毎に採番する方法を解説させて頂きます。

具体的には、アプリストアの「営業支援(SFA)パック」を利用して、案件情報を登録する時の「案件名」に、任意のフィールド情報と共に、ルックアップで取得された「顧客ごとの連番」を文字列連結した上で、デフォルト表示を行うというものです。

ご利用される場合は、このアプリパックをkintoneアプリストアから追加して下さい。

■フォームイメージ

[画面1] (採番した画面を添付)


■採番フォーマット

・[顧客名]-[連番5桁]-[案件種類]

■フィールドの設定

・顧客情報アプリ
顧客ごとの連番を管理する必要がありますので、顧客情報アプリに採番管理用のフィールドを以下の内容にて追加します。※表記以外はデフォルトです。

・配置するパーツ:数値
・フィールド名:案件連番
・初期値:0
・フィールドコード:案件連番

※普段必要なフィールドではないので、グループパーツで隠しておくのも良いかと思います。

後ほど、上記案件連番を更新するために顧客情報のアプリIDが必要になるのですが、これを検索するために、アプリコードの設定を行います。設定は[アプリの設定]-[詳細設定]を展開-[高度な設定]画面より行います。

[画面2] (アプリコードの設定画面)

・案件情報アプリ
案件情報アプリにも、上記の顧客情報アプリ同様の数値パーツフィールドを追加します。また、後ほど顧客情報アプリの更新時に必要なレコード番号を取得するため、以下のフィールドを追加します。

・配置するパーツ:数値
・フィールド名:顧客情報レコード番号
・フィールドコード:顧客情報レコード番号

上記2フィールドを追加した後、顧客名ルックアップフィールドの設定、[ほかのフィールドのコピー]にて、[案件連番]及び[顧客情報レコード番号]の値を取得するように設定します。

[画面3] (ルックアップの設定画面)

次に[案件名]に付与する任意のフィールドとして、以下の追加を行います。現在のapiバージョンでは、ルックアップフィールドのイベント取得ができないため、ここで追加するフィールドのイベントで案件名の設定を行います。

・配置するパーツ:ドロップダウン
・フィールド名:案件種類
・項目と順番:{新規, 追加, 変更}
・フィールドコード:案件種類

■案件連番の取得と編集を行うソースコード

(function() {
    "use strict";

    // 案件種類フィールドの更新イベントを登録します
    var events = [
        'app.record.create.change.案件種類',
        'app.record.edit.change.案件種類'
    ];

    kintone.events.on(events, function(event) {
        var record = event.record;
        var matterName =
            record['ルックアップ']['value'] +
            "-" +
            ("00000" + record['案件連番']['value']).slice(-5) +
            "-" +
            record['案件種類']['value'];
        record['文字列__1行__1']['value'] = matterName;
        return event;
    });

})();

■連番を更新するソースコード

(function() {
    "use strict";

    // Register the events.
    var events = [
        'app.record.create.submit'
    ]

    kintone.events.on(events, function(event) {

        var app_code = "AppIdClient001";        // 顧客情報アプリの設定情報(画面2)

        kintone.api('/k/v1/apps', 'GET', {"codes": [ app_code ]
        }, function (resp) {
            var app_id = resp.apps[0].appId;
            var record = event.record;
            var rec_id = record['顧客情報レコード番号']['value'];
            var seq = parseInt(record['案件連番']['value']) + 1;

	    // 案件連番更新リクエスト
            kintone.api('/k/v1/record', 'PUT',
            {
                "app": app_id, "id": rec_id, "revision": -1, "record":{
                "案件連番" : { "value": seq }
                }
            }, function(resp) {
            }, function(resp) {
                var errmsg = 'An error occurred while updating records.';
                if (resp.message !== undefined){
                    errmsg += '\n' + resp.message;
                    alert(errmsg);
                }
            }
            );
        }, function (resp) {
            var errmsg = 'An error occurred while getting records.';
            if (resp.message !== undefined) {
                errmsg += '\n' + resp.message;
                alert(errmsg);
            }
        });
    });
})();

■ソースコードの解説
顧客ごとの連番を適用する部分については、ルックアップフィールドの設定内容にある、取得先の情報を利用しているため、ソースコードはとても簡単なコードとなっております。

連番を更新するソースコードにについても、同様で、ルックアップフィールド設定時に、顧客情報レコードIDを取得するようにしておりますので、レコードの特定には画面上の項目を利用しています。

アプリIDにつきましては、本記事執筆中にリリースされました2014/9/14リリースバージョンから、<a href="http://goo.gl/bGJCSx">アプリ情報を取得するapiが追加</a>されましたので、それを利用しました。名称や複数のコードを利用して、一括取得が可能なりましたが、ここでは設定したアプリコードから、アプリIDを取得しています。


■注意事項など

顧客情報の案件連番更新に関する一連の処理は、案件情報登録時の、'app.record.create.submit'イベントを元に、別のアプリのフィールドを更新しますが、顧客情報が更新中だったり削除されていた場合は当然の事ながら、更新はされません。また案件変更時も、イベント自体が対象外であり、また顧客が変更されたという情報も捕捉しておりませんので、手作業の修正による対応が必要となります。

以上のように、顧客ごとの連番整合性は比較的緩く維持されていることをご理解の上、ご活用下さいませ。



